{
  "type": "File",
  "start": 0,
  "end": 7415,
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 186,
      "column": 0
    }
  },
  "program": {
    "type": "Program",
    "start": 0,
    "end": 7415,
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 186,
        "column": 0
      }
    },
    "sourceType": "module",
    "body": [
      {
        "type": "ExportNamedDeclaration",
        "start": 7389,
        "end": 7414,
        "loc": {
          "start": {
            "line": 185,
            "column": 0
          },
          "end": {
            "line": 185,
            "column": 25
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 7396,
          "end": 7414,
          "loc": {
            "start": {
              "line": 185,
              "column": 7
            },
            "end": {
              "line": 185,
              "column": 25
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 7402,
              "end": 7413,
              "loc": {
                "start": {
                  "line": 185,
                  "column": 13
                },
                "end": {
                  "line": 185,
                  "column": 24
                }
              },
              "id": {
                "type": "Identifier",
                "start": 7402,
                "end": 7405,
                "loc": {
                  "start": {
                    "line": 185,
                    "column": 13
                  },
                  "end": {
                    "line": 185,
                    "column": 16
                  },
                  "identifierName": "foo"
                },
                "name": "foo",
                "leadingComments": null
              },
              "init": {
                "type": "StringLiteral",
                "start": 7408,
                "end": 7413,
                "loc": {
                  "start": {
                    "line": 185,
                    "column": 19
                  },
                  "end": {
                    "line": 185,
                    "column": 24
                  }
                },
                "extra": {
                  "rawValue": "bar",
                  "raw": "'bar'"
                },
                "value": "bar"
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Contains the configuration of your project, in addition to any decorated\n * controls and scenes we detected. Most top-level parameters are sourced\n * from your package.json upon compilation.\n *\n * @typedef {object} IPackageConfig\n * @property {string} name\n * @property {string} version\n * @property {string} [description]\n * @property {string[]} [keywords]\n * @property {boolean} [private]\n * @property {string} [homepage]\n ",
              "start": 0,
              "end": 434,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 0
                },
                "end": {
                  "line": 13,
                  "column": 3
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n * IVideoPositionOptions are passed into display.moveVideo() to change\n * where the video is shown on the screen.\n *\n * @typedef {object} IVideoPositionOptions\n * @property {number} [left='auto'] Position of the video on screen from the\n * left-hand edge of the container.\n * @property {number} [right='auto'] Position of the video on screen from the\n * right-hand edge of the container.\n * @property {number} [top='auto'] Position of the video on screen from the\n * top of the container.\n * @property {number} [bottom='auto'] Position of the video on screen from the\n * bottom of the container.\n * @property {number} [width='auto'] Width of the video on screen in pixels.\n * @property {number} [width='auto'] Height of the video on screen in pixels.\n * @property {number} [duration=0] Duration of the movement easing\n * in milliseconds.\n * @property {number} [easing='linear'] CSS easing function. Defaults to 'linear'.\n * See {@link https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function}.\n ",
              "start": 435,
              "end": 1455,
              "loc": {
                "start": {
                  "line": 14,
                  "column": 0
                },
                "end": {
                  "line": 33,
                  "column": 3
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n * ISettings are settings specific to each run of the custom controls. They contain\n * some data about where the controls are displayed and the client displaying them.\n *\n * @typedef {object} ISettings\n * @property {string} language The user's current language setting, as defined\n * in {@link http://www.ietf.org/rfc/bcp/bcp47.txt}: This is generally in the\n * form `<language>[-<locale>]`. For example, `en`, or `en-US`.\n * @property {boolean} placesVideo Whether the video is included in and placed\n * by the control area. On mobile layouts, this will generally be false.\n * @property {'mobile'|'xbox'|'desktop'} platform  The platform the controls\n * are currently running on.\n ",
              "start": 1456,
              "end": 2144,
              "loc": {
                "start": {
                  "line": 34,
                  "column": 0
                },
                "end": {
                  "line": 46,
                  "column": 3
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n * IVideoPosition contains data about the position of the video relative\n * to the iframe, in addition to its channel ID.\n *\n * @typedef {object} IVideoPosition\n * @property {number} channelId The channel this video belongs to.\n * @property {number} bottom The video's offset from the bottom of\n * the container in pixels.\n * @property {number} top The video's offset from the top of\n * the container in pixels.\n * @property {number} left The video's offset from the left edge of\n * the container in pixels.\n * @property {number} right The video's offset from the right edge of\n * the container in pixels.\n * @property {number} height The video's height in pixels.\n * @property {number} width The video's width in pixels.\n ",
              "start": 2145,
              "end": 2874,
              "loc": {
                "start": {
                  "line": 47,
                  "column": 0
                },
                "end": {
                  "line": 63,
                  "column": 3
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n * IVideoPositionList is given in the `positions()`\n * observable from the {@link Display}.\n *\n * @typedef {object} IVideoPositionList\n * @property {IVideoPosition} connectedPlayer connectedPlayer is the position\n * of the video which the interactive integration is currently connected to.\n * (In a Mixer costream, there can be multiple players displayed at once.)\n * @property {IVideoPosition[]} costreamPlayers costreamPlayers is a list of\n * all players in a Mixer costream. Costreaming allows multiple people to\n * stream together, you can read more about it at the link below. This wil\n * always contain, at minimumum, the connectedPlayer. Additional channels may\n * come and go over the course of the broadcast.\n *\n * See {@link https://watchbeam.zendesk.com/hc/en-us/articles/115003032426-Co-Stream-FAQ}\n * for more information about costreams.\n ",
              "start": 2875,
              "end": 3734,
              "loc": {
                "start": {
                  "line": 64,
                  "column": 0
                },
                "end": {
                  "line": 80,
                  "column": 3
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n * IStateDump is a dump of the raw object tree. The Mixer.socket has an\n * `onStateDump` handler which should be attached to; the editor will use\n * this during runtime for debugging.\n *\n * @typedef {object} IStateDump\n * @property {IScene[]} scenes\n * @property {IGroup[]} groups\n * @property {IParticipant} participant\n ",
              "start": 3735,
              "end": 4063,
              "loc": {
                "start": {
                  "line": 81,
                  "column": 0
                },
                "end": {
                  "line": 90,
                  "column": 3
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n * ISceneOptions can be passed into the @{@link Scene} decorator.\n *\n * @typedef {object} ISceneOptions\n * @property {boolean} [default=true]\n * Whether to use this scene as the handler for all scenes.\n *\n * You can override scenes by their `id` to use a different scene for a\n * certain sceneID. In cases where there isn't a specific class for a\n * sceneID, the default will be used.\n *\n * ```\n * @Scene({ default: true })\n * class MyAwesomeScene {\n *   // ...\n * }\n * ```\n * @property {string} [id]\n * When specified, registers this class to handle a specific scene ID.\n * For instance, if you wanted the scene IOD `lobby` and `arena` to be\n * implemented with two different classes, you could do that with\n * something like the following:\n *\n * ```\n * @Scene({ id: 'lobby' })\n * class Lobbby {\n *   // ...\n * }\n *\n * @Scene({ id: 'arena' })\n * class Arena {\n *   // ...\n * }\n * ```\n * @property {IInputDescriptor[]} [inputs]\n * Scene inputs. Note: this will be filled in automatically for you\n * if you use the @{@link Input decorator, but this may come in handy if you\n * don't want to or can't use them in your environment.\n ",
              "start": 4064,
              "end": 5200,
              "loc": {
                "start": {
                  "line": 91,
                  "column": 0
                },
                "end": {
                  "line": 129,
                  "column": 3
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n * IInputOptions are passed into the @{@link Input} decorator.\n *\n * @typedef {object} IInputOptions\n * @property {string} [alias]\n * Alias of the property as sent to the Interactive game client and sent\n * on the wire. Defaults to the property's name.\n * @property {string} [displayName]\n * Human-readable name of the input as displayed on the interactive\n * editor. Defaults to the property's name.\n * @property {*} [defaultValue] Default value for the option.\n * @property {InputKind} [kind]\n * The type of data this input takes. See the InputKind enum for more\n * information and a description. If you are not using TypeScript, this\n * MUST be defined!\n ",
              "start": 5201,
              "end": 5865,
              "loc": {
                "start": {
                  "line": 130,
                  "column": 0
                },
                "end": {
                  "line": 145,
                  "column": 3
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n * ISceneDescriptor is returned from the {@link Registry}'s `.getScene()`.\n * This contains the scene options along with its constructor.\n *\n * @typedef {ISceneOptions} ISceneDescriptor\n * @property {Function} ctor The scene's constructor\n ",
              "start": 5866,
              "end": 6112,
              "loc": {
                "start": {
                  "line": 146,
                  "column": 0
                },
                "end": {
                  "line": 152,
                  "column": 3
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n * IInputDescriptors are returned from the {@link Registry}'s .getInputs().\n * This contains the inputs options along with its constructor.\n *\n * @typedef {IInputOptions} IInputDescriptor\n * @property {string} propertyName The name of the property the input decorates\n ",
              "start": 6113,
              "end": 6388,
              "loc": {
                "start": {
                  "line": 153,
                  "column": 0
                },
                "end": {
                  "line": 159,
                  "column": 3
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n * IControlOptions are passed to the @{@link Control} decorator to describe how\n * the control is rendered.\n *\n * @typedef {object} IControlOptions\n * @property {string} kind The kind of the control that this class should\n * render. The some default kinds are \"button\" and \"joystick\".\n * @property {IInputDescriptor[]} [inputs]\n * Control inputs. Note: this will be filled in automatically for you\n * if you use the @Input decorator, but this may come in handy if you\n * don't want to or can't use them in your environment.\n ",
              "start": 6389,
              "end": 6920,
              "loc": {
                "start": {
                  "line": 160,
                  "column": 0
                },
                "end": {
                  "line": 171,
                  "column": 3
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n * IControlDescriptor is returned from the {@link Registry}'s\n * .getControl(). This contains the {@link Control} options along\n * with its constructor.\n *\n * @typedef {IControlOptions} IControlDescriptor\n * @property {Function} ctor The control's constructor\n ",
              "start": 6921,
              "end": 7188,
              "loc": {
                "start": {
                  "line": 172,
                  "column": 0
                },
                "end": {
                  "line": 179,
                  "column": 3
                }
              }
            },
            {
              "type": "CommentBlock",
              "value": "*\n * An RxJS observable. See {@link http://reactivex.io/rxjs/manual/overview.html#introduction}.\n * @typedef {object} Observable\n ",
              "start": 7189,
              "end": 7323,
              "loc": {
                "start": {
                  "line": 180,
                  "column": 0
                },
                "end": {
                  "line": 183,
                  "column": 3
                }
              }
            },
            {
              "type": "CommentLine",
              "value": " hack: some export is needed for esdoc to see this as a module",
              "start": 7324,
              "end": 7388,
              "loc": {
                "start": {
                  "line": 184,
                  "column": 0
                },
                "end": {
                  "line": 184,
                  "column": 64
                }
              }
            }
          ],
          "trailingComments": []
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Contains the configuration of your project, in addition to any decorated\n * controls and scenes we detected. Most top-level parameters are sourced\n * from your package.json upon compilation.\n *\n * @typedef {object} IPackageConfig\n * @property {string} name\n * @property {string} version\n * @property {string} [description]\n * @property {string[]} [keywords]\n * @property {boolean} [private]\n * @property {string} [homepage]\n ",
            "start": 0,
            "end": 434,
            "loc": {
              "start": {
                "line": 1,
                "column": 0
              },
              "end": {
                "line": 13,
                "column": 3
              }
            }
          },
          {
            "type": "CommentBlock",
            "value": "*\n * IVideoPositionOptions are passed into display.moveVideo() to change\n * where the video is shown on the screen.\n *\n * @typedef {object} IVideoPositionOptions\n * @property {number} [left='auto'] Position of the video on screen from the\n * left-hand edge of the container.\n * @property {number} [right='auto'] Position of the video on screen from the\n * right-hand edge of the container.\n * @property {number} [top='auto'] Position of the video on screen from the\n * top of the container.\n * @property {number} [bottom='auto'] Position of the video on screen from the\n * bottom of the container.\n * @property {number} [width='auto'] Width of the video on screen in pixels.\n * @property {number} [width='auto'] Height of the video on screen in pixels.\n * @property {number} [duration=0] Duration of the movement easing\n * in milliseconds.\n * @property {number} [easing='linear'] CSS easing function. Defaults to 'linear'.\n * See {@link https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function}.\n ",
            "start": 435,
            "end": 1455,
            "loc": {
              "start": {
                "line": 14,
                "column": 0
              },
              "end": {
                "line": 33,
                "column": 3
              }
            }
          },
          {
            "type": "CommentBlock",
            "value": "*\n * ISettings are settings specific to each run of the custom controls. They contain\n * some data about where the controls are displayed and the client displaying them.\n *\n * @typedef {object} ISettings\n * @property {string} language The user's current language setting, as defined\n * in {@link http://www.ietf.org/rfc/bcp/bcp47.txt}: This is generally in the\n * form `<language>[-<locale>]`. For example, `en`, or `en-US`.\n * @property {boolean} placesVideo Whether the video is included in and placed\n * by the control area. On mobile layouts, this will generally be false.\n * @property {'mobile'|'xbox'|'desktop'} platform  The platform the controls\n * are currently running on.\n ",
            "start": 1456,
            "end": 2144,
            "loc": {
              "start": {
                "line": 34,
                "column": 0
              },
              "end": {
                "line": 46,
                "column": 3
              }
            }
          },
          {
            "type": "CommentBlock",
            "value": "*\n * IVideoPosition contains data about the position of the video relative\n * to the iframe, in addition to its channel ID.\n *\n * @typedef {object} IVideoPosition\n * @property {number} channelId The channel this video belongs to.\n * @property {number} bottom The video's offset from the bottom of\n * the container in pixels.\n * @property {number} top The video's offset from the top of\n * the container in pixels.\n * @property {number} left The video's offset from the left edge of\n * the container in pixels.\n * @property {number} right The video's offset from the right edge of\n * the container in pixels.\n * @property {number} height The video's height in pixels.\n * @property {number} width The video's width in pixels.\n ",
            "start": 2145,
            "end": 2874,
            "loc": {
              "start": {
                "line": 47,
                "column": 0
              },
              "end": {
                "line": 63,
                "column": 3
              }
            }
          },
          {
            "type": "CommentBlock",
            "value": "*\n * IVideoPositionList is given in the `positions()`\n * observable from the {@link Display}.\n *\n * @typedef {object} IVideoPositionList\n * @property {IVideoPosition} connectedPlayer connectedPlayer is the position\n * of the video which the interactive integration is currently connected to.\n * (In a Mixer costream, there can be multiple players displayed at once.)\n * @property {IVideoPosition[]} costreamPlayers costreamPlayers is a list of\n * all players in a Mixer costream. Costreaming allows multiple people to\n * stream together, you can read more about it at the link below. This wil\n * always contain, at minimumum, the connectedPlayer. Additional channels may\n * come and go over the course of the broadcast.\n *\n * See {@link https://watchbeam.zendesk.com/hc/en-us/articles/115003032426-Co-Stream-FAQ}\n * for more information about costreams.\n ",
            "start": 2875,
            "end": 3734,
            "loc": {
              "start": {
                "line": 64,
                "column": 0
              },
              "end": {
                "line": 80,
                "column": 3
              }
            }
          },
          {
            "type": "CommentBlock",
            "value": "*\n * IStateDump is a dump of the raw object tree. The Mixer.socket has an\n * `onStateDump` handler which should be attached to; the editor will use\n * this during runtime for debugging.\n *\n * @typedef {object} IStateDump\n * @property {IScene[]} scenes\n * @property {IGroup[]} groups\n * @property {IParticipant} participant\n ",
            "start": 3735,
            "end": 4063,
            "loc": {
              "start": {
                "line": 81,
                "column": 0
              },
              "end": {
                "line": 90,
                "column": 3
              }
            }
          },
          {
            "type": "CommentBlock",
            "value": "*\n * ISceneOptions can be passed into the @{@link Scene} decorator.\n *\n * @typedef {object} ISceneOptions\n * @property {boolean} [default=true]\n * Whether to use this scene as the handler for all scenes.\n *\n * You can override scenes by their `id` to use a different scene for a\n * certain sceneID. In cases where there isn't a specific class for a\n * sceneID, the default will be used.\n *\n * ```\n * @Scene({ default: true })\n * class MyAwesomeScene {\n *   // ...\n * }\n * ```\n * @property {string} [id]\n * When specified, registers this class to handle a specific scene ID.\n * For instance, if you wanted the scene IOD `lobby` and `arena` to be\n * implemented with two different classes, you could do that with\n * something like the following:\n *\n * ```\n * @Scene({ id: 'lobby' })\n * class Lobbby {\n *   // ...\n * }\n *\n * @Scene({ id: 'arena' })\n * class Arena {\n *   // ...\n * }\n * ```\n * @property {IInputDescriptor[]} [inputs]\n * Scene inputs. Note: this will be filled in automatically for you\n * if you use the @{@link Input decorator, but this may come in handy if you\n * don't want to or can't use them in your environment.\n ",
            "start": 4064,
            "end": 5200,
            "loc": {
              "start": {
                "line": 91,
                "column": 0
              },
              "end": {
                "line": 129,
                "column": 3
              }
            }
          },
          {
            "type": "CommentBlock",
            "value": "*\n * IInputOptions are passed into the @{@link Input} decorator.\n *\n * @typedef {object} IInputOptions\n * @property {string} [alias]\n * Alias of the property as sent to the Interactive game client and sent\n * on the wire. Defaults to the property's name.\n * @property {string} [displayName]\n * Human-readable name of the input as displayed on the interactive\n * editor. Defaults to the property's name.\n * @property {*} [defaultValue] Default value for the option.\n * @property {InputKind} [kind]\n * The type of data this input takes. See the InputKind enum for more\n * information and a description. If you are not using TypeScript, this\n * MUST be defined!\n ",
            "start": 5201,
            "end": 5865,
            "loc": {
              "start": {
                "line": 130,
                "column": 0
              },
              "end": {
                "line": 145,
                "column": 3
              }
            }
          },
          {
            "type": "CommentBlock",
            "value": "*\n * ISceneDescriptor is returned from the {@link Registry}'s `.getScene()`.\n * This contains the scene options along with its constructor.\n *\n * @typedef {ISceneOptions} ISceneDescriptor\n * @property {Function} ctor The scene's constructor\n ",
            "start": 5866,
            "end": 6112,
            "loc": {
              "start": {
                "line": 146,
                "column": 0
              },
              "end": {
                "line": 152,
                "column": 3
              }
            }
          },
          {
            "type": "CommentBlock",
            "value": "*\n * IInputDescriptors are returned from the {@link Registry}'s .getInputs().\n * This contains the inputs options along with its constructor.\n *\n * @typedef {IInputOptions} IInputDescriptor\n * @property {string} propertyName The name of the property the input decorates\n ",
            "start": 6113,
            "end": 6388,
            "loc": {
              "start": {
                "line": 153,
                "column": 0
              },
              "end": {
                "line": 159,
                "column": 3
              }
            }
          },
          {
            "type": "CommentBlock",
            "value": "*\n * IControlOptions are passed to the @{@link Control} decorator to describe how\n * the control is rendered.\n *\n * @typedef {object} IControlOptions\n * @property {string} kind The kind of the control that this class should\n * render. The some default kinds are \"button\" and \"joystick\".\n * @property {IInputDescriptor[]} [inputs]\n * Control inputs. Note: this will be filled in automatically for you\n * if you use the @Input decorator, but this may come in handy if you\n * don't want to or can't use them in your environment.\n ",
            "start": 6389,
            "end": 6920,
            "loc": {
              "start": {
                "line": 160,
                "column": 0
              },
              "end": {
                "line": 171,
                "column": 3
              }
            }
          },
          {
            "type": "CommentBlock",
            "value": "*\n * IControlDescriptor is returned from the {@link Registry}'s\n * .getControl(). This contains the {@link Control} options along\n * with its constructor.\n *\n * @typedef {IControlOptions} IControlDescriptor\n * @property {Function} ctor The control's constructor\n ",
            "start": 6921,
            "end": 7188,
            "loc": {
              "start": {
                "line": 172,
                "column": 0
              },
              "end": {
                "line": 179,
                "column": 3
              }
            }
          },
          {
            "type": "CommentBlock",
            "value": "*\n * An RxJS observable. See {@link http://reactivex.io/rxjs/manual/overview.html#introduction}.\n * @typedef {object} Observable\n ",
            "start": 7189,
            "end": 7323,
            "loc": {
              "start": {
                "line": 180,
                "column": 0
              },
              "end": {
                "line": 183,
                "column": 3
              }
            }
          },
          {
            "type": "CommentLine",
            "value": " hack: some export is needed for esdoc to see this as a module",
            "start": 7324,
            "end": 7388,
            "loc": {
              "start": {
                "line": 184,
                "column": 0
              },
              "end": {
                "line": 184,
                "column": 64
              }
            }
          }
        ]
      }
    ],
    "directives": []
  },
  "comments": [
    {
      "type": "CommentBlock",
      "value": "*\n * Contains the configuration of your project, in addition to any decorated\n * controls and scenes we detected. Most top-level parameters are sourced\n * from your package.json upon compilation.\n *\n * @typedef {object} IPackageConfig\n * @property {string} name\n * @property {string} version\n * @property {string} [description]\n * @property {string[]} [keywords]\n * @property {boolean} [private]\n * @property {string} [homepage]\n ",
      "start": 0,
      "end": 434,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 13,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * IVideoPositionOptions are passed into display.moveVideo() to change\n * where the video is shown on the screen.\n *\n * @typedef {object} IVideoPositionOptions\n * @property {number} [left='auto'] Position of the video on screen from the\n * left-hand edge of the container.\n * @property {number} [right='auto'] Position of the video on screen from the\n * right-hand edge of the container.\n * @property {number} [top='auto'] Position of the video on screen from the\n * top of the container.\n * @property {number} [bottom='auto'] Position of the video on screen from the\n * bottom of the container.\n * @property {number} [width='auto'] Width of the video on screen in pixels.\n * @property {number} [width='auto'] Height of the video on screen in pixels.\n * @property {number} [duration=0] Duration of the movement easing\n * in milliseconds.\n * @property {number} [easing='linear'] CSS easing function. Defaults to 'linear'.\n * See {@link https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function}.\n ",
      "start": 435,
      "end": 1455,
      "loc": {
        "start": {
          "line": 14,
          "column": 0
        },
        "end": {
          "line": 33,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ISettings are settings specific to each run of the custom controls. They contain\n * some data about where the controls are displayed and the client displaying them.\n *\n * @typedef {object} ISettings\n * @property {string} language The user's current language setting, as defined\n * in {@link http://www.ietf.org/rfc/bcp/bcp47.txt}: This is generally in the\n * form `<language>[-<locale>]`. For example, `en`, or `en-US`.\n * @property {boolean} placesVideo Whether the video is included in and placed\n * by the control area. On mobile layouts, this will generally be false.\n * @property {'mobile'|'xbox'|'desktop'} platform  The platform the controls\n * are currently running on.\n ",
      "start": 1456,
      "end": 2144,
      "loc": {
        "start": {
          "line": 34,
          "column": 0
        },
        "end": {
          "line": 46,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * IVideoPosition contains data about the position of the video relative\n * to the iframe, in addition to its channel ID.\n *\n * @typedef {object} IVideoPosition\n * @property {number} channelId The channel this video belongs to.\n * @property {number} bottom The video's offset from the bottom of\n * the container in pixels.\n * @property {number} top The video's offset from the top of\n * the container in pixels.\n * @property {number} left The video's offset from the left edge of\n * the container in pixels.\n * @property {number} right The video's offset from the right edge of\n * the container in pixels.\n * @property {number} height The video's height in pixels.\n * @property {number} width The video's width in pixels.\n ",
      "start": 2145,
      "end": 2874,
      "loc": {
        "start": {
          "line": 47,
          "column": 0
        },
        "end": {
          "line": 63,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * IVideoPositionList is given in the `positions()`\n * observable from the {@link Display}.\n *\n * @typedef {object} IVideoPositionList\n * @property {IVideoPosition} connectedPlayer connectedPlayer is the position\n * of the video which the interactive integration is currently connected to.\n * (In a Mixer costream, there can be multiple players displayed at once.)\n * @property {IVideoPosition[]} costreamPlayers costreamPlayers is a list of\n * all players in a Mixer costream. Costreaming allows multiple people to\n * stream together, you can read more about it at the link below. This wil\n * always contain, at minimumum, the connectedPlayer. Additional channels may\n * come and go over the course of the broadcast.\n *\n * See {@link https://watchbeam.zendesk.com/hc/en-us/articles/115003032426-Co-Stream-FAQ}\n * for more information about costreams.\n ",
      "start": 2875,
      "end": 3734,
      "loc": {
        "start": {
          "line": 64,
          "column": 0
        },
        "end": {
          "line": 80,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * IStateDump is a dump of the raw object tree. The Mixer.socket has an\n * `onStateDump` handler which should be attached to; the editor will use\n * this during runtime for debugging.\n *\n * @typedef {object} IStateDump\n * @property {IScene[]} scenes\n * @property {IGroup[]} groups\n * @property {IParticipant} participant\n ",
      "start": 3735,
      "end": 4063,
      "loc": {
        "start": {
          "line": 81,
          "column": 0
        },
        "end": {
          "line": 90,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ISceneOptions can be passed into the @{@link Scene} decorator.\n *\n * @typedef {object} ISceneOptions\n * @property {boolean} [default=true]\n * Whether to use this scene as the handler for all scenes.\n *\n * You can override scenes by their `id` to use a different scene for a\n * certain sceneID. In cases where there isn't a specific class for a\n * sceneID, the default will be used.\n *\n * ```\n * @Scene({ default: true })\n * class MyAwesomeScene {\n *   // ...\n * }\n * ```\n * @property {string} [id]\n * When specified, registers this class to handle a specific scene ID.\n * For instance, if you wanted the scene IOD `lobby` and `arena` to be\n * implemented with two different classes, you could do that with\n * something like the following:\n *\n * ```\n * @Scene({ id: 'lobby' })\n * class Lobbby {\n *   // ...\n * }\n *\n * @Scene({ id: 'arena' })\n * class Arena {\n *   // ...\n * }\n * ```\n * @property {IInputDescriptor[]} [inputs]\n * Scene inputs. Note: this will be filled in automatically for you\n * if you use the @{@link Input decorator, but this may come in handy if you\n * don't want to or can't use them in your environment.\n ",
      "start": 4064,
      "end": 5200,
      "loc": {
        "start": {
          "line": 91,
          "column": 0
        },
        "end": {
          "line": 129,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * IInputOptions are passed into the @{@link Input} decorator.\n *\n * @typedef {object} IInputOptions\n * @property {string} [alias]\n * Alias of the property as sent to the Interactive game client and sent\n * on the wire. Defaults to the property's name.\n * @property {string} [displayName]\n * Human-readable name of the input as displayed on the interactive\n * editor. Defaults to the property's name.\n * @property {*} [defaultValue] Default value for the option.\n * @property {InputKind} [kind]\n * The type of data this input takes. See the InputKind enum for more\n * information and a description. If you are not using TypeScript, this\n * MUST be defined!\n ",
      "start": 5201,
      "end": 5865,
      "loc": {
        "start": {
          "line": 130,
          "column": 0
        },
        "end": {
          "line": 145,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ISceneDescriptor is returned from the {@link Registry}'s `.getScene()`.\n * This contains the scene options along with its constructor.\n *\n * @typedef {ISceneOptions} ISceneDescriptor\n * @property {Function} ctor The scene's constructor\n ",
      "start": 5866,
      "end": 6112,
      "loc": {
        "start": {
          "line": 146,
          "column": 0
        },
        "end": {
          "line": 152,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * IInputDescriptors are returned from the {@link Registry}'s .getInputs().\n * This contains the inputs options along with its constructor.\n *\n * @typedef {IInputOptions} IInputDescriptor\n * @property {string} propertyName The name of the property the input decorates\n ",
      "start": 6113,
      "end": 6388,
      "loc": {
        "start": {
          "line": 153,
          "column": 0
        },
        "end": {
          "line": 159,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * IControlOptions are passed to the @{@link Control} decorator to describe how\n * the control is rendered.\n *\n * @typedef {object} IControlOptions\n * @property {string} kind The kind of the control that this class should\n * render. The some default kinds are \"button\" and \"joystick\".\n * @property {IInputDescriptor[]} [inputs]\n * Control inputs. Note: this will be filled in automatically for you\n * if you use the @Input decorator, but this may come in handy if you\n * don't want to or can't use them in your environment.\n ",
      "start": 6389,
      "end": 6920,
      "loc": {
        "start": {
          "line": 160,
          "column": 0
        },
        "end": {
          "line": 171,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * IControlDescriptor is returned from the {@link Registry}'s\n * .getControl(). This contains the {@link Control} options along\n * with its constructor.\n *\n * @typedef {IControlOptions} IControlDescriptor\n * @property {Function} ctor The control's constructor\n ",
      "start": 6921,
      "end": 7188,
      "loc": {
        "start": {
          "line": 172,
          "column": 0
        },
        "end": {
          "line": 179,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * An RxJS observable. See {@link http://reactivex.io/rxjs/manual/overview.html#introduction}.\n * @typedef {object} Observable\n ",
      "start": 7189,
      "end": 7323,
      "loc": {
        "start": {
          "line": 180,
          "column": 0
        },
        "end": {
          "line": 183,
          "column": 3
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " hack: some export is needed for esdoc to see this as a module",
      "start": 7324,
      "end": 7388,
      "loc": {
        "start": {
          "line": 184,
          "column": 0
        },
        "end": {
          "line": 184,
          "column": 64
        }
      }
    }
  ],
  "tokens": [
    {
      "type": "CommentBlock",
      "value": "*\n * Contains the configuration of your project, in addition to any decorated\n * controls and scenes we detected. Most top-level parameters are sourced\n * from your package.json upon compilation.\n *\n * @typedef {object} IPackageConfig\n * @property {string} name\n * @property {string} version\n * @property {string} [description]\n * @property {string[]} [keywords]\n * @property {boolean} [private]\n * @property {string} [homepage]\n ",
      "start": 0,
      "end": 434,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 13,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * IVideoPositionOptions are passed into display.moveVideo() to change\n * where the video is shown on the screen.\n *\n * @typedef {object} IVideoPositionOptions\n * @property {number} [left='auto'] Position of the video on screen from the\n * left-hand edge of the container.\n * @property {number} [right='auto'] Position of the video on screen from the\n * right-hand edge of the container.\n * @property {number} [top='auto'] Position of the video on screen from the\n * top of the container.\n * @property {number} [bottom='auto'] Position of the video on screen from the\n * bottom of the container.\n * @property {number} [width='auto'] Width of the video on screen in pixels.\n * @property {number} [width='auto'] Height of the video on screen in pixels.\n * @property {number} [duration=0] Duration of the movement easing\n * in milliseconds.\n * @property {number} [easing='linear'] CSS easing function. Defaults to 'linear'.\n * See {@link https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function}.\n ",
      "start": 435,
      "end": 1455,
      "loc": {
        "start": {
          "line": 14,
          "column": 0
        },
        "end": {
          "line": 33,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ISettings are settings specific to each run of the custom controls. They contain\n * some data about where the controls are displayed and the client displaying them.\n *\n * @typedef {object} ISettings\n * @property {string} language The user's current language setting, as defined\n * in {@link http://www.ietf.org/rfc/bcp/bcp47.txt}: This is generally in the\n * form `<language>[-<locale>]`. For example, `en`, or `en-US`.\n * @property {boolean} placesVideo Whether the video is included in and placed\n * by the control area. On mobile layouts, this will generally be false.\n * @property {'mobile'|'xbox'|'desktop'} platform  The platform the controls\n * are currently running on.\n ",
      "start": 1456,
      "end": 2144,
      "loc": {
        "start": {
          "line": 34,
          "column": 0
        },
        "end": {
          "line": 46,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * IVideoPosition contains data about the position of the video relative\n * to the iframe, in addition to its channel ID.\n *\n * @typedef {object} IVideoPosition\n * @property {number} channelId The channel this video belongs to.\n * @property {number} bottom The video's offset from the bottom of\n * the container in pixels.\n * @property {number} top The video's offset from the top of\n * the container in pixels.\n * @property {number} left The video's offset from the left edge of\n * the container in pixels.\n * @property {number} right The video's offset from the right edge of\n * the container in pixels.\n * @property {number} height The video's height in pixels.\n * @property {number} width The video's width in pixels.\n ",
      "start": 2145,
      "end": 2874,
      "loc": {
        "start": {
          "line": 47,
          "column": 0
        },
        "end": {
          "line": 63,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * IVideoPositionList is given in the `positions()`\n * observable from the {@link Display}.\n *\n * @typedef {object} IVideoPositionList\n * @property {IVideoPosition} connectedPlayer connectedPlayer is the position\n * of the video which the interactive integration is currently connected to.\n * (In a Mixer costream, there can be multiple players displayed at once.)\n * @property {IVideoPosition[]} costreamPlayers costreamPlayers is a list of\n * all players in a Mixer costream. Costreaming allows multiple people to\n * stream together, you can read more about it at the link below. This wil\n * always contain, at minimumum, the connectedPlayer. Additional channels may\n * come and go over the course of the broadcast.\n *\n * See {@link https://watchbeam.zendesk.com/hc/en-us/articles/115003032426-Co-Stream-FAQ}\n * for more information about costreams.\n ",
      "start": 2875,
      "end": 3734,
      "loc": {
        "start": {
          "line": 64,
          "column": 0
        },
        "end": {
          "line": 80,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * IStateDump is a dump of the raw object tree. The Mixer.socket has an\n * `onStateDump` handler which should be attached to; the editor will use\n * this during runtime for debugging.\n *\n * @typedef {object} IStateDump\n * @property {IScene[]} scenes\n * @property {IGroup[]} groups\n * @property {IParticipant} participant\n ",
      "start": 3735,
      "end": 4063,
      "loc": {
        "start": {
          "line": 81,
          "column": 0
        },
        "end": {
          "line": 90,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ISceneOptions can be passed into the @{@link Scene} decorator.\n *\n * @typedef {object} ISceneOptions\n * @property {boolean} [default=true]\n * Whether to use this scene as the handler for all scenes.\n *\n * You can override scenes by their `id` to use a different scene for a\n * certain sceneID. In cases where there isn't a specific class for a\n * sceneID, the default will be used.\n *\n * ```\n * @Scene({ default: true })\n * class MyAwesomeScene {\n *   // ...\n * }\n * ```\n * @property {string} [id]\n * When specified, registers this class to handle a specific scene ID.\n * For instance, if you wanted the scene IOD `lobby` and `arena` to be\n * implemented with two different classes, you could do that with\n * something like the following:\n *\n * ```\n * @Scene({ id: 'lobby' })\n * class Lobbby {\n *   // ...\n * }\n *\n * @Scene({ id: 'arena' })\n * class Arena {\n *   // ...\n * }\n * ```\n * @property {IInputDescriptor[]} [inputs]\n * Scene inputs. Note: this will be filled in automatically for you\n * if you use the @{@link Input decorator, but this may come in handy if you\n * don't want to or can't use them in your environment.\n ",
      "start": 4064,
      "end": 5200,
      "loc": {
        "start": {
          "line": 91,
          "column": 0
        },
        "end": {
          "line": 129,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * IInputOptions are passed into the @{@link Input} decorator.\n *\n * @typedef {object} IInputOptions\n * @property {string} [alias]\n * Alias of the property as sent to the Interactive game client and sent\n * on the wire. Defaults to the property's name.\n * @property {string} [displayName]\n * Human-readable name of the input as displayed on the interactive\n * editor. Defaults to the property's name.\n * @property {*} [defaultValue] Default value for the option.\n * @property {InputKind} [kind]\n * The type of data this input takes. See the InputKind enum for more\n * information and a description. If you are not using TypeScript, this\n * MUST be defined!\n ",
      "start": 5201,
      "end": 5865,
      "loc": {
        "start": {
          "line": 130,
          "column": 0
        },
        "end": {
          "line": 145,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ISceneDescriptor is returned from the {@link Registry}'s `.getScene()`.\n * This contains the scene options along with its constructor.\n *\n * @typedef {ISceneOptions} ISceneDescriptor\n * @property {Function} ctor The scene's constructor\n ",
      "start": 5866,
      "end": 6112,
      "loc": {
        "start": {
          "line": 146,
          "column": 0
        },
        "end": {
          "line": 152,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * IInputDescriptors are returned from the {@link Registry}'s .getInputs().\n * This contains the inputs options along with its constructor.\n *\n * @typedef {IInputOptions} IInputDescriptor\n * @property {string} propertyName The name of the property the input decorates\n ",
      "start": 6113,
      "end": 6388,
      "loc": {
        "start": {
          "line": 153,
          "column": 0
        },
        "end": {
          "line": 159,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * IControlOptions are passed to the @{@link Control} decorator to describe how\n * the control is rendered.\n *\n * @typedef {object} IControlOptions\n * @property {string} kind The kind of the control that this class should\n * render. The some default kinds are \"button\" and \"joystick\".\n * @property {IInputDescriptor[]} [inputs]\n * Control inputs. Note: this will be filled in automatically for you\n * if you use the @Input decorator, but this may come in handy if you\n * don't want to or can't use them in your environment.\n ",
      "start": 6389,
      "end": 6920,
      "loc": {
        "start": {
          "line": 160,
          "column": 0
        },
        "end": {
          "line": 171,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * IControlDescriptor is returned from the {@link Registry}'s\n * .getControl(). This contains the {@link Control} options along\n * with its constructor.\n *\n * @typedef {IControlOptions} IControlDescriptor\n * @property {Function} ctor The control's constructor\n ",
      "start": 6921,
      "end": 7188,
      "loc": {
        "start": {
          "line": 172,
          "column": 0
        },
        "end": {
          "line": 179,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * An RxJS observable. See {@link http://reactivex.io/rxjs/manual/overview.html#introduction}.\n * @typedef {object} Observable\n ",
      "start": 7189,
      "end": 7323,
      "loc": {
        "start": {
          "line": 180,
          "column": 0
        },
        "end": {
          "line": 183,
          "column": 3
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " hack: some export is needed for esdoc to see this as a module",
      "start": 7324,
      "end": 7388,
      "loc": {
        "start": {
          "line": 184,
          "column": 0
        },
        "end": {
          "line": 184,
          "column": 64
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 7389,
      "end": 7395,
      "loc": {
        "start": {
          "line": 185,
          "column": 0
        },
        "end": {
          "line": 185,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 7396,
      "end": 7401,
      "loc": {
        "start": {
          "line": 185,
          "column": 7
        },
        "end": {
          "line": 185,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "foo",
      "start": 7402,
      "end": 7405,
      "loc": {
        "start": {
          "line": 185,
          "column": 13
        },
        "end": {
          "line": 185,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 7406,
      "end": 7407,
      "loc": {
        "start": {
          "line": 185,
          "column": 17
        },
        "end": {
          "line": 185,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "bar",
      "start": 7408,
      "end": 7413,
      "loc": {
        "start": {
          "line": 185,
          "column": 19
        },
        "end": {
          "line": 185,
          "column": 24
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 7413,
      "end": 7414,
      "loc": {
        "start": {
          "line": 185,
          "column": 24
        },
        "end": {
          "line": 185,
          "column": 25
        }
      }
    },
    {
      "type": {
        "label": "eof",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 7415,
      "end": 7415,
      "loc": {
        "start": {
          "line": 186,
          "column": 0
        },
        "end": {
          "line": 186,
          "column": 0
        }
      }
    }
  ]
}